// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCategory {
  count: Int!
}

type AggregateKeyword {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  id: ID!
  name: String!
  keywords(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Keyword!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  name: String!
  keywords: KeywordCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutKeywordsInput {
  create: CategoryCreateWithoutKeywordsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutKeywordsInput {
  id: ID
  name: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CategoryPreviousValues {
  id: ID!
  name: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  name: String
  keywords: KeywordUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  name: String
}

input CategoryUpdateOneWithoutKeywordsInput {
  create: CategoryCreateWithoutKeywordsInput
  update: CategoryUpdateWithoutKeywordsDataInput
  upsert: CategoryUpsertWithoutKeywordsInput
  delete: Boolean
  disconnect: Boolean
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutKeywordsDataInput {
  name: String
}

input CategoryUpsertWithoutKeywordsInput {
  update: CategoryUpdateWithoutKeywordsDataInput!
  create: CategoryCreateWithoutKeywordsInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  keywords_every: KeywordWhereInput
  keywords_some: KeywordWhereInput
  keywords_none: KeywordWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Keyword {
  id: ID!
  word: String!
  score: Int
  category: Category
}

type KeywordConnection {
  pageInfo: PageInfo!
  edges: [KeywordEdge]!
  aggregate: AggregateKeyword!
}

input KeywordCreateInput {
  id: ID
  word: String!
  score: Int
  category: CategoryCreateOneWithoutKeywordsInput
}

input KeywordCreateManyWithoutCategoryInput {
  create: [KeywordCreateWithoutCategoryInput!]
  connect: [KeywordWhereUniqueInput!]
}

input KeywordCreateWithoutCategoryInput {
  id: ID
  word: String!
  score: Int
}

type KeywordEdge {
  node: Keyword!
  cursor: String!
}

enum KeywordOrderByInput {
  id_ASC
  id_DESC
  word_ASC
  word_DESC
  score_ASC
  score_DESC
}

type KeywordPreviousValues {
  id: ID!
  word: String!
  score: Int
}

input KeywordScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  word: String
  word_not: String
  word_in: [String!]
  word_not_in: [String!]
  word_lt: String
  word_lte: String
  word_gt: String
  word_gte: String
  word_contains: String
  word_not_contains: String
  word_starts_with: String
  word_not_starts_with: String
  word_ends_with: String
  word_not_ends_with: String
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  AND: [KeywordScalarWhereInput!]
  OR: [KeywordScalarWhereInput!]
  NOT: [KeywordScalarWhereInput!]
}

type KeywordSubscriptionPayload {
  mutation: MutationType!
  node: Keyword
  updatedFields: [String!]
  previousValues: KeywordPreviousValues
}

input KeywordSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: KeywordWhereInput
  AND: [KeywordSubscriptionWhereInput!]
  OR: [KeywordSubscriptionWhereInput!]
  NOT: [KeywordSubscriptionWhereInput!]
}

input KeywordUpdateInput {
  word: String
  score: Int
  category: CategoryUpdateOneWithoutKeywordsInput
}

input KeywordUpdateManyDataInput {
  word: String
  score: Int
}

input KeywordUpdateManyMutationInput {
  word: String
  score: Int
}

input KeywordUpdateManyWithoutCategoryInput {
  create: [KeywordCreateWithoutCategoryInput!]
  delete: [KeywordWhereUniqueInput!]
  connect: [KeywordWhereUniqueInput!]
  set: [KeywordWhereUniqueInput!]
  disconnect: [KeywordWhereUniqueInput!]
  update: [KeywordUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [KeywordUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [KeywordScalarWhereInput!]
  updateMany: [KeywordUpdateManyWithWhereNestedInput!]
}

input KeywordUpdateManyWithWhereNestedInput {
  where: KeywordScalarWhereInput!
  data: KeywordUpdateManyDataInput!
}

input KeywordUpdateWithoutCategoryDataInput {
  word: String
  score: Int
}

input KeywordUpdateWithWhereUniqueWithoutCategoryInput {
  where: KeywordWhereUniqueInput!
  data: KeywordUpdateWithoutCategoryDataInput!
}

input KeywordUpsertWithWhereUniqueWithoutCategoryInput {
  where: KeywordWhereUniqueInput!
  update: KeywordUpdateWithoutCategoryDataInput!
  create: KeywordCreateWithoutCategoryInput!
}

input KeywordWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  word: String
  word_not: String
  word_in: [String!]
  word_not_in: [String!]
  word_lt: String
  word_lte: String
  word_gt: String
  word_gte: String
  word_contains: String
  word_not_contains: String
  word_starts_with: String
  word_not_starts_with: String
  word_ends_with: String
  word_not_ends_with: String
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  category: CategoryWhereInput
  AND: [KeywordWhereInput!]
  OR: [KeywordWhereInput!]
  NOT: [KeywordWhereInput!]
}

input KeywordWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createKeyword(data: KeywordCreateInput!): Keyword!
  updateKeyword(data: KeywordUpdateInput!, where: KeywordWhereUniqueInput!): Keyword
  updateManyKeywords(data: KeywordUpdateManyMutationInput!, where: KeywordWhereInput): BatchPayload!
  upsertKeyword(where: KeywordWhereUniqueInput!, create: KeywordCreateInput!, update: KeywordUpdateInput!): Keyword!
  deleteKeyword(where: KeywordWhereUniqueInput!): Keyword
  deleteManyKeywords(where: KeywordWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  keyword(where: KeywordWhereUniqueInput!): Keyword
  keywords(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Keyword]!
  keywordsConnection(where: KeywordWhereInput, orderBy: KeywordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeywordConnection!
  node(id: ID!): Node
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  keyword(where: KeywordSubscriptionWhereInput): KeywordSubscriptionPayload
}
`